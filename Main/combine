import pygame
import os
import math
import sys
import random

# Initialise
pygame.init()
screen = pygame.display.set_mode((620, 480))
pygame.display.set_caption("Pawland Boy")
clock = pygame.time.Clock()

font = pygame.font.SysFont(None, 24)

# Load map image
map_image = pygame.image.load(os.path.join("rynn/Map.png")).convert()

# Camera and player position 
camera_width, camera_height = 320, 180
camera = pygame.Rect(0, 0, camera_width, camera_height)
zoom_surface = pygame.Surface((camera_width, camera_height))
player_position = pygame.Vector2(320, 180)
speed = 2
restricted_zones = [
    {
        "type": "ellipse",
        "center": (1554, 585),
        "radius_x": 165,
        "radius_y": 162
    }
]

def is_in_ellipse(point, center, radius_x, radius_y):
    px, py = point
    cx, cy = center
    dx = (px - cx) ** 2 / (radius_x ** 2)
    dy = (py - cy) ** 2 / (radius_y ** 2)
    result = dx + dy <= 1
    return result

def is_in_restricted_zone(point, zones):
    for zone in zones:
        if zone["type"] == "ellipse":
            if is_in_ellipse(point, zone["center"], zone["radius_x"], zone["radius_y"]):
                return True
    return False

# Day-night cycle
overlay = pygame.Surface(screen.get_size(), pygame.SRCALPHA)
time_counter = 0
cycle_speed = (2 * math.pi) / 30

# Minimap settings
minimap_radius = 60
minimap_zoom_factor = 0.8
minimap_pos = (minimap_radius + 10, minimap_radius + 10)
minimap_border_color = (0, 0, 0)
minimap_border_width = 2
player_minimap_color = (255, 50, 50)
minimap_mask = pygame.Surface((minimap_radius * 2, minimap_radius * 2), pygame.SRCALPHA)
pygame.draw.circle(minimap_mask, (255, 255, 255), (minimap_radius, minimap_radius), minimap_radius)

FRAME_WIDTH, FRAME_HEIGHT = 200, 200

def load_frames(sheet, frame_width, frame_height, row, num_frames):
    return [sheet.subsurface(pygame.Rect(i * frame_width, row * frame_height, frame_width, frame_height)) for i in range(num_frames)]

class Player:
    def __init__(self, position, speed):
        self.position = position
        self.speed = speed
        self.direction = 'down'
        self.attacking = False
        self.frame = 0
        self.attack_frame = 0
        self.last_frame_time = 0
        self.frame_speed = 0.1
        self.attack_frame_delay = 3
        self.attack_frame_counter = 0

        self.walk_sheet = pygame.image.load("minting/character.png").convert_alpha()
        self.attack_sheet = pygame.image.load("minting/attack.png").convert_alpha()

        self.walk_down = load_frames(self.walk_sheet, FRAME_WIDTH, FRAME_HEIGHT, 0, 3)
        self.walk_up = load_frames(self.walk_sheet, FRAME_WIDTH, FRAME_HEIGHT, 1, 4)
        self.walk_left = load_frames(self.walk_sheet, FRAME_WIDTH, FRAME_HEIGHT, 2, 4)
        self.walk_right = load_frames(self.walk_sheet, FRAME_WIDTH, FRAME_HEIGHT, 3, 4)

        self.attack_right = load_frames(self.attack_sheet, FRAME_WIDTH, FRAME_HEIGHT, 0, 4)
        self.attack_left = load_frames(self.attack_sheet, FRAME_WIDTH, FRAME_HEIGHT, 1, 4)

    def move(self, keys, dt):
        moving = keys[pygame.K_w] or keys[pygame.K_s] or keys[pygame.K_a] or keys[pygame.K_d]
        if moving and not self.attacking:
            current_time = pygame.time.get_ticks()
            if current_time - self.last_frame_time > self.frame_speed * 1000:
                self.frame += 1
                self.last_frame_time = current_time

        if self.direction == 'down':
            return self.walk_down[self.frame % len(self.walk_down)]
        elif self.direction == 'up':
            return self.walk_up[self.frame % len(self.walk_up)]
        elif self.direction == 'left':
            return self.walk_left[self.frame % len(self.walk_left)]
        elif self.direction == 'right':
            return self.walk_right[self.frame % len(self.walk_right)]

    def attack(self, trees):
        if not self.attacking:
            return None

        if self.attack_frame_counter >= self.attack_frame_delay:
            self.attack_frame += 1
            self.attack_frame_counter = 0
        else:
            self.attack_frame_counter += 1

        sprite = self.get_attack_sprite()

        if self.attack_frame // 2 >= len(self.attack_right):
            self.attacking = False
            self.attack_frame = 0

        attack_rect = self.get_attack_rect(50)
        for tree in trees:
            if attack_rect.colliderect(tree.get_hitbox()):
                tree.start_animation()

        return sprite

    def get_attack_sprite(self):
        idx = self.attack_frame // 2
        max_idx = len(self.attack_right) - 1
        idx = min(idx, max_idx)
        if self.direction == 'left':
            return self.attack_left[idx]
        else:
            return self.attack_right[idx]

    def get_attack_rect(self, range):
        if self.direction == 'up':
            return pygame.Rect(self.position.x - 20, self.position.y - range, 40, range)
        elif self.direction == 'down':
            return pygame.Rect(self.position.x - 20, self.position.y, 40, range)
        elif self.direction == 'left':
            return pygame.Rect(self.position.x - range, self.position.y - 20, range, 40)
        elif self.direction == 'right':
            return pygame.Rect(self.position.x, self.position.y - 20, range, 40)

class Tree:
    def __init__(self, position, frames):
        self.position = pygame.Vector2(position)
        self.frames = frames
        self.index = 0
        self.animating = False
        self.animation_speed = 0.2
        self.last_update_time = 0
        self.hold_duration = 10
        self.hold_start_time = 0
        self.is_holding = False

    def start_animation(self):
        if not self.animating and not self.is_holding:
            self.animating = True
            self.index = 0
            self.last_update_time = pygame.time.get_ticks() / 1000

    def update(self, current_time):
        if self.animating:
            if current_time - self.last_update_time > self.animation_speed:
                self.index += 1
                self.last_update_time = current_time
                if self.index >= 6:
                    self.index = 6
                    self.animating = False
                    self.is_holding = True
                    self.hold_start_time = current_time
        elif self.is_holding:
            if current_time - self.hold_start_time > self.hold_duration:
                self.is_holding = False
                self.index = 0

    def get_hitbox(self):
        hitbox_height = 20
        return pygame.Rect(
            self.position.x + 20,
            self.position.y + 100 - hitbox_height,
            100 - 40,
            hitbox_height
        )

    def draw(self, surface, camera):
        pos_on_surface = self.position - pygame.Vector2(camera.topleft)
        surface.blit(self.frames[self.index], pos_on_surface)

tree_sheet = pygame.image.load("rynn/tree-new.png").convert_alpha()
tree_frames = load_frames(tree_sheet, 100, 100, 0, 7)
trees = []
for _ in range(20):
    x = random.randint(0, min(1720, map_image.get_width()) - 100)
    y = random.randint(0, min(800, map_image.get_height()) - 100)
    trees.append(Tree((x, y), tree_frames))

player_instance = Player(player_position, speed)

running = True
while running:
    dt = clock.tick(60) / 1000
    current_time = pygame.time.get_ticks() / 1000

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_EQUALS:
                minimap_zoom_factor = min(4.0, minimap_zoom_factor + 0.1)
            elif event.key == pygame.K_MINUS:
                minimap_zoom_factor = max(0.5, minimap_zoom_factor - 0.1)

    keys = pygame.key.get_pressed()
    move_distance = speed * dt * 60

    # --- NEW Restriction check per direction ---
    proposed_position = player_instance.position.copy()

    if keys[pygame.K_w]:  # Up
        test_pos = proposed_position.copy()
        test_pos.y -= move_distance
        test_rect = pygame.Rect(test_pos.x - 20, test_pos.y - 20, 40, 40)
        if not is_in_restricted_zone(test_rect.center, restricted_zones):
            proposed_position.y -= move_distance
            player_instance.direction = 'up'
    if keys[pygame.K_s]:  # Down
        test_pos = proposed_position.copy()
        test_pos.y += move_distance
        test_rect = pygame.Rect(test_pos.x - 20, test_pos.y - 20, 40, 40)
        if not is_in_restricted_zone(test_rect.center, restricted_zones):
            proposed_position.y += move_distance
            player_instance.direction = 'down'
    if keys[pygame.K_a]:  # Left
        test_pos = proposed_position.copy()
        test_pos.x -= move_distance
        test_rect = pygame.Rect(test_pos.x - 20, test_pos.y - 20, 40, 40)
        if not is_in_restricted_zone(test_rect.center, restricted_zones):
            proposed_position.x -= move_distance
            player_instance.direction = 'left'
    if keys[pygame.K_d]:  # Right
        test_pos = proposed_position.copy()
        test_pos.x += move_distance
        test_rect = pygame.Rect(test_pos.x - 20, test_pos.y - 20, 40, 40)
        if not is_in_restricted_zone(test_rect.center, restricted_zones):
            proposed_position.x += move_distance
            player_instance.direction = 'right'

    proposed_position.x = max(0, min(proposed_position.x, map_image.get_width()))
    proposed_position.y = max(0, min(proposed_position.y, map_image.get_height()))

    player_instance.position = proposed_position
    player_position = proposed_position

    current_sprite = player_instance.move(keys, dt)
    attack_sprite = player_instance.attack(trees)

    if keys[pygame.K_SPACE] and not player_instance.attacking:
        player_instance.attacking = True

    camera.center = player_position
    camera.clamp_ip(map_image.get_rect())

    zoom_surface.fill((0, 0, 0))
    zoom_surface.blit(map_image, (0, 0), camera)

    for tree in trees:
        tree.update(current_time)
        tree.draw(zoom_surface, camera)

    zoomed_view = pygame.transform.scale(zoom_surface, screen.get_size())
    screen.blit(zoomed_view, (0, 0))

    sprite_x = screen.get_width() // 2 - FRAME_WIDTH // 2
    sprite_y = screen.get_height() // 2 - FRAME_HEIGHT // 2

    if attack_sprite:
        screen.blit(attack_sprite, (sprite_x, sprite_y))
    else:
        screen.blit(current_sprite, (sprite_x, sprite_y))

    minimap_surface = pygame.Surface((minimap_radius * 2, minimap_radius * 2), pygame.SRCALPHA)
    mini_camera_size = minimap_radius * 2 / minimap_zoom_factor
    mini_camera = pygame.Rect(0, 0, mini_camera_size, mini_camera_size)
    mini_camera.center = player_position
    mini_camera.clamp_ip(map_image.get_rect())
    mini_view = map_image.subsurface(mini_camera).copy()
    scaled_mini_view = pygame.transform.scale(mini_view, (minimap_radius * 2, minimap_radius * 2))
    minimap_surface.blit(scaled_mini_view, (0, 0))
    masked_minimap = minimap_surface.copy()
    masked_minimap.blit(minimap_mask, (0, 0), special_flags=pygame.BLEND_RGBA_MULT)
    pygame.draw.circle(masked_minimap, player_minimap_color, (minimap_radius, minimap_radius), 3)
    pygame.draw.circle(masked_minimap, minimap_border_color, (minimap_radius, minimap_radius), minimap_radius, minimap_border_width)
    screen.blit(masked_minimap, (minimap_pos[0] - minimap_radius, minimap_pos[1] - minimap_radius))

    time_counter += dt
    alpha = int((math.sin(time_counter * cycle_speed) + 1) / 2 * 150)
    overlay.fill((0, 0, 0, alpha))
    screen.blit(overlay, (0, 0))

    pos_text = f"X: {int(player_position.x)}  Y: {int(player_position.y)}"
    text_surface = font.render(pos_text, True, (255, 255, 255))
    screen.blit(text_surface, (10, screen.get_height() - 30))

    pygame.display.flip()

pygame.quit()
sys.exit()
